#!/bin/bash

f_usbip=false;
f_x2goserver=false;
f_x2goclient=false;
f_kvm=false

print_main_menu() {
	menu=$(zenity --list --width=450 --height=310 --title="X2Go Helper" \
    --text="Select Item" \
    --column="Available operations" \
    --column="      Description" \
	"Installation"                    "required at first start" \
	"Share and connect USB devices"   "list of usbip commands" \
	"x2go"                            "manage x2go sessions" \
	"kvm"                             "manage kvm VMs")
}

print_installation_menu() {
	usbip_status="not installed [-]"
	x2cl_status="not installed [-]"
	x2sr_status="not installed [-]"
	kvm_status="not installed [-]"

	if $f_usbip ; then
	   	usbip_status="already installed [+]"
	fi

	if $f_x2goclient ; then
	   	x2cl_status="already installed [+]"
   	fi

	if $f_x2goserver ; then
	   	x2sr_status="already installed [+]"
   	fi

	if $f_kvm ; then
	   	kvm_status="already installed [+]"
   	fi

	install_menu=$(zenity --list  --width=450 --height=310 --title="Installation" \
    --text="Install the required tools:" \
    --column="Available tools" \
    --column="      Description" \
    "<-Back"          " " \
    "check"                        "checking tools(run at first launch)" \
	"netplan settings to default"  "              need reboot system" \
    "usbip"            "              $usbip_status" \
	"x2goserver"       "              $x2sr_status" \
	"x2goclient"       "              $x2cl_status" \
	"kvm for server"   "              $kvm_status")
}

print_usbip_menu() {
	usbip_menu=$(zenity --list  --width=450 --height=310 --title="USB/IP(both)" \
    --text="Select item:" \
    --column="Available commands" \
    --column="      Description" \
    "<-Back" "" \
	"List of connected USB devices"  "client / server" \
	"List of already shared devices" "client / server" \
	"Bind usb device"                "       server" \
	"Unbind usb device"              "       server" \
	"Attach usb device"              "       client" \
	"Detach usb device"              "       client" \
	"Autostartup manage"             "client / server")

}

print_scripts_menu() {

	scripts_menu=$(zenity --list  --width=450 --height=310 --title="x2go Helper" \
    --text="Select item:" \
    --column="Available commands" \
    --column="      Description" \
    "<-Back" "" \
	"Create systemd script for share USB device"  "server" \
	"Delete systemd script for share USB device"  "server" \
	"Create systemd script for attach USB device" "client" \
	"Delete systemd script for attach USB device" "client")
}


print_x2go_menu() {
	x2go_menu=$(zenity --list  --width=450 --height=310 --title="X2GO(client)" \
    --text="Select item:" \
    --column="Available commands" \
    --column="      Description" \
    "<-Back" "" \
	"Create autostartup x2go session" "      create client systemd script" \
	"Delete x2go autostartup" "      delete client systemd script" \
	"Start x2go session" "        client")
}

print_kvm_menu() {
	kvm_menu=$(zenity --list  --width=450 --height=310 --title="KVM(server)" \
    --text="Select item:" \
    --column="Available commands" \
    --column="      Description" \
    "<-Back" "" \
	"List of VMs" "" \
	"Start VM" "" \
	"Stop VM" "" \
	"Delete VM"     "" \
    "Open VMs" "" \
    "Create new VM" "need move .iso to dir /kvm/iso/")
}

if [ "$EUID" -ne 0 ]
	then echo "Please run as root!"
	exit
fi

system=$(lsb_release -d) 

while true; do
	print_main_menu
	selected_item=$( echo $menu | awk -F ',' '{print $1}' )

	case "${selected_item}" in
		"Installation"	)
			while true; do
				print_installation_menu
				selected_install_list=$( echo $install_menu | awk -F ',' '{print $1}' )
				case "${selected_install_list}" in

					"check" )
						usbip_install=$(sudo dpkg -s linux-tools-`uname -r`)

						if [[ "$usbip_install" == *"Status: install ok installed"* ]]; then
							f_usbip=true;
						fi

						x2cl_install=$(sudo dpkg -s x2goclient)

						if [[ "$x2cl_install" == *"Status: install ok installed"* ]]; then
							f_x2goclient=true;
						fi

						x2sr_install=$(sudo dpkg -s x2goserver)

						if [[ "$x2cl_install" == *"Status: install ok installed"* ]]; then
							f_x2goserver=true;
						fi

						kvm_install=$(dpkg -s qemu)

						netplan=$(cat /etc/netplan/01-network-manager-all.yaml)

						if [[ "$kvm_install" == *"Status: install ok installed"* &&
							  "$netplan" != *"NetworkManager"* ]]; then
							f_kvm=true;
						fi

						break;
					;;

					"netplan settings to default")
						{
							echo "network:"
						  	echo "  version: 2"
						  	echo "  renderer: NetworkManager"
						} > /etc/netplan/01-network-manager-all.yaml

						netplan apply

						f_kvm=false;

						shutdown -r -t 0 now
					;;

					"usbip" )
						if [[ "$system" == *"Raspbian"* ]]; then
							apt-get update -y 
							apt-get dist-upgrade -y 
							progress=$(apt-get install usbip)

							{
								echo "usbip-core"
								echo "usbip-host"
								echo "vhci-hcd"
							} > /etc/modules

							if [[ "$progress" == *"is already the newest version"* || \
							      "$progress" == *"Уже установлен пакет"* ]]; then
								zenity --info --width=200 --height=100 --text "usbip already installed"
							elif [[ "$progress" == *"Setting up usbip"* ||
							        "$progress" == *"Настраивается пакет usbip"* ]]; then
								zenity --info --width=200 --height=100 --text "usbip succesfully installed"
								clear
							fi
							f_usbip=true

						elif [[ "$system" == *"Ubuntu"* ]]; then
							apt-get update -y 
							apt-get dist-upgrade -y 
							progress=$(apt-get install linux-tools-`uname -r` -y)
							{
								echo "usbip-core"
								echo "usbip-host"
								echo "vhci-hcd"
							} > /etc/modules
	 	
							usbipd -D

							if [[ "$progress" == *"is already the newest version"* || \
							      "$progress" == *"Уже установлен пакет"* ]]; then
								zenity --info --width=200 --height=100 --text "usbip already installed"
							elif [[ "$progress" == *"Setting up usbip"* ||
							        "$progress" == *"Настраивается пакет usbip"* ]]; then
								zenity --info --width=200 --height=100 --text "usbip succesfully installed"
								clear
							fi
							f_usbip=true
						fi
					;;
					"x2goserver" )
						if [[ "$system" == *"Ubuntu"* ]]; then
							apt-get install python-software-properties -y
							apt-get install software-properties-common -y
							add-apt-repository ppa:x2go/stable -y
							apt-get update -y
							ubuntu_progress=$(apt-get install x2goserver x2goserver-xsession -y)

							if [[ "$ubuntu_progress" == *"is already the newest version"* || \
						          "$ubuntu_progress" == *"Уже установлен пакет"* ]]; then
								zenity --info --width=200 --height=100 --text "x2goserver already installed"
							elif [[ "$ubuntu_progress" == *"Setting up "* ||
						    	    "$ubuntu_progress" == *"Настраивается пакет "* ]]; then
								zenity --info --width=200 --height=100 --text "x2goserver succesfully installed"
								clear
							fi
							f_x2goserver=true
						elif [[ "$system" == *"Debian"* || "$system" == *"Raspbian"* ]]; then
							apt-key adv --recv-keys --keyserver keys.gnupg.net E1F958385BFE2B6E -y
							{
								echo "# X2Go Repository (release builds)"
								echo "deb http://packages.x2go.org/debian buster extras main"
								echo "# X2Go Repository (sources of release builds)"
								echo "deb-src http://packages.x2go.org/debian buster extras main"
							} > /etc/apt/sources.list.d/x2go.list

							apt-get install x2go-keyring -y && apt-get update -y

							apt-get install x2goserver x2goserver-xsession libnss-ldap ldap-utils -y

							debian_progress=$(apt-get install x2goserver x2goserver-xsession libnss-ldap ldap-utils -y)
							if [[ "$debian_progress" == *"is already the newest version"* || \
						      "$debian_progress" == *"Уже установлен пакет"* ]]; then
								zenity --info --width=200 --height=100 --text "x2goserver already installed"
							elif [[ "$debian_progress" == *"Setting up "* ||
						    	    "$debian_progress" == *"Настраивается пакет "* ]]; then
								zenity --info --width=200 --height=100 --text "x2goserver succesfully installed"
								clear 
							fi
							f_x2goserver=true
						fi
					;;
					"x2goclient" )
						if [[ "$system" == *"Ubuntu"* ]]; then
							apt-get install python-software-properties -y
							apt-get install software-properties-common -y
							add-apt-repository ppa:x2go/stable -y
							apt-get update -y

							ubuntu_progress=$(apt-get install x2goclient -y)
							if [[ "$ubuntu_progress" == *"is already the newest version"* || \
						      	  "$ubuntu_progress" == *"Уже установлен пакет"* ]]; then
								zenity --info --width=200 --height=100 --text "x2goclient already installed"
							elif [[ "$ubuntu_progress" == *"Setting up "* ||
						    	    "$ubuntu_progress" == *"Настраивается пакет "* ]]; then
								zenity --info --width=200 --height=100 --text "x2goclient succesfully installed"
								clear
							fi
							f_x2goclient=true
						elif [[ "$system" == *"Debian"* || "$system" == *"Raspbian"* ]]; then
							apt-key adv --recv-keys --keyserver keys.gnupg.net E1F958385BFE2B6E -y
							{
								echo "# X2Go Repository (release builds)"
								echo "deb http://packages.x2go.org/debian buster extras main"
								echo "# X2Go Repository (sources of release builds)"
								echo "deb-src http://packages.x2go.org/debian buster extras main"
							} > /etc/apt/sources.list.d/x2go.list

							apt-get install x2go-keyring -y && apt-get update -y
							apt-get install x2goclient -y

							debian_progress=$(apt-get install x2goclient -y)
							if [[ "$debian_progress" == *"is already the newest version"* || \
						          "$debian_progress" == *"Уже установлен пакет"* ]]; then
								zenity --info --width=200 --height=100 --text "x2goclient already installed"
							elif [[ "$debian_progress" == *"Setting up "* ||
						    	    "$debian_progress" == *"Настраивается пакет "* ]]; then
								zenity --info --width=200 --height=100 --text "x2goclient succesfully installed"
								clear 
							fi
							f_x2goclient=true
						fi
					;;

					"kvm for server" )
						# if [[ "$system" == *"Ubuntu"* ]]; then

						# elif [[ "$system" == *"Debian"* ]]; then

						# fi

						if ! [ -d /kvm ]; then
							mkdir -p /kvm/{vhdd,iso}
						fi
						apt-get install cpu-checker
						apt-get install chrony

						systemctl enable chrony

						kvm_exist_status=$(kvm-ok)

						if [[ "$kvm_exist_status" != *"/dev/kvm exists"* ]]; then
							zenity --info --width=200 --height=100 --text "kvm doesn't support on this machine (check BIOS)"
							break;
						fi

						zenity --info --width=200 --height=100 --text "KVM acceleration can be used"

						qemu_status=$(apt-get install qemu qemu-kvm libvirt-daemon-system virtinst libosinfo-bin)

						if [[ "$qemu_status" == *"is already the newest version"* || \
							  "$qemu_status" == *"Уже установлен пакет"* ]]; then
							zenity --info --width=200 --height=100 --text "qemu already installed"
						elif [[ "$qemu_status" == *"Setting up"* ||
							    "$qemu_status" == *"Настраивается пакет"* ]]; then
							zenity --info --width=200 --height=100 --text "qemu succesfully installed"
							clear
						fi

						systemctl enable libvirtd

						interface=$(ifconfig | grep "<UP,BROADCAST,RUNNING,MULTICAST>")
						interface=$(echo $interface | cut -d ':' -f1)
						data=$(ifdata -pa $interface)

						if [[ "$interface" == *"w"* ]]; then
							zenity --info --width=200 --height=100 --text "Creating virtual bridge impossible(Use LAN)"
							break;
						fi

						subnet="$(echo $data | cut -d '.' -f1 ).$(echo $data | cut -d '.' -f2).$(echo $data | cut -d '.' -f3)"

						{
							echo "network:"
						  echo "  ethernets:"
							echo "    $interface:"
							echo "      dhcp4: false"
							echo "      dhcp6: false"
							echo "  version: 2"
							echo ""
							echo "  bridges:"
							echo "    br0:"
							echo "      macaddress: 16:76:1a:3b:be:03"
							echo "      interfaces:"
							echo "        - $interface"
							echo "      addresses:"
							echo "        - $subnet.24/24"
							echo "      gateway4: $subnet.1"
							echo "      nameservers:"
							echo "        addresses:"
							echo "          - $subnet.1"
							echo "          - $subnet.2"
							echo "      dhcp4: false"
							echo "      dhcp6: false"
							echo "      parameters:"
							echo "        stp: true"
							echo "        forward-delay: 4"
						} > /etc/netplan/01-network-manager-all.yaml

						netplan apply

						f_kvm=true;
					;;

					"<-Back" )
						break;
					;;

					"")
						break;
					;;
				esac
			done
		;;

		"Share and connect USB devices" )
			usbipd -D
			while true; do
				print_usbip_menu
				selected_usbip=$( echo $usbip_menu | awk -F ',' '{print $1}' )

				case "${selected_usbip}" in
					"List of connected USB devices" )

						list_connection=$(usbip list -l)
						zenity --info --width=450 --height=250 --text "<b>usbip list -l</b> \n $list_connection "
					;;

					"List of already shared devices" )

						ip=$(zenity --entry \
							--title="" \
							--text="Enter server IP:" \
							--entry-text "localhost")

						list_shared=$(usbip list -r $ip)

						if [[ length=${#list_shared} -eq 0 ]]; then
							zenity --warning --width=450 --height=150 --text "<b>usbip list -r $ip </b> \nno exportable devices found on $ip "
						else
							zenity --info --width=450 --height=250 --text "<b>usbip list -r $ip </b> \n$list_shared "
						fi
					;;

					"Bind usb device" )

						bind_ID=$(zenity --entry \
							--title="" \
							--text="Enter usb busID:" \
							--entry-text "2-1")

						usbip bind -b $bind_ID > /dev/null 2>&1
						list_bind="$?"

						if [[ list_bind -eq 0 ]]; then
							zenity --info --width=450 --height=150 --text "<b> usbip bind -b $bind_ID</b>\nbind device on busid $bind_ID: complete"
						elif [[ list_bind -eq 1 ]]; then
							zenity --error --width=450 --height=150 --text "<b>usbip bind -b $bind_ID</b>\ndevice on busid $bind_ID is already bound to usbip-host or no exist"
						fi
					;;
					"Unbind usb device" )

						unbind_ID=$(zenity --entry \
							--title="" \
							--text="Enter usb busID:" \
							--entry-text "2-1")

						usbip unbind -b $unbind_ID > /dev/null 2>&1
						list_unbind="$?"

						if [[ list_unbind -eq 0 ]]; then
							zenity --info --width=450 --height=150 --text "<b>usbip unbind -b $unbind_ID</b>\nunbind device on busid $unbind_ID: complete"
						elif [[ list_unbind -eq 1 ]]; then
							zenity --error --width=450 --height=150 --text "<b>usbip unbind -b $unbind_ID</b>\ndevice is not bound to usbip-host driver or no exist"
						fi
					;;
					"Attach usb device" )

						IP=$(zenity --entry \
							--title="" \
							--text="Enter server IP:" \
							--entry-text "localhost")
						ID=$(zenity --entry \
							--title="" \
							--text="Enter usb busID:" \
							--entry-text "2-1")

						sudo usbip attach -r $IP -b $ID /dev/null 2>&1
						list_attach="$?"

						if [[ list_attach -eq 0 ]]; then
							zenity --info --width=450 --height=150 --text "<b>sudo usbip attach -r $IP -b $ID</b>\nAttach Request successfully completed"
						elif [[ list_attach -eq 1 ]]; then
							zenity --info --width=450 --height=150 --text "<b>sudo usbip attach -r $IP -b $ID</b>\nAttach Request for $ID failed - Device not found"
						fi
					;;
					"Detach usb device" )

						list_ports=$(sudo usbip port)

						port=$(zenity --entry \
							--title="Enter usb port:" \
							--width=450 --height=150 \
							--text="$list_ports" \
							--entry-text "00")
						
						list_detach=$(sudo usbip detach --port=$port)

						if [[ list_detach -eq 0 ]]; then
							zenity --info --width=450 --height=150 --text "<b>sudo usbip detach --port=$port</b>\n$port is now detached or already detached\n"
						elif [[ list_detach -eq 1 ]]; then
							zenity --error --width=450 --height=150 --text "<b>sudo usbip detach --port=$port</b>Error while detaching device\n"
						fi
					;;

					"<-Back" )
						break;
					;;

					"")
						break;
					;;

					"Autostartup manage" )
					while true; do
						print_scripts_menu
						selected_script=$( echo $scripts_menu | awk -F ',' '{print $1}' )

						case "${selected_script}" in
							"Create systemd script for share USB device" )
								{
						  			echo "[Unit]"
						  			echo "Description=USBIPd"
						  			echo "[Service]"
						  			echo "ExecStart=/scripts/usbipd"
						  			echo "Type=oneshot"
						  			echo "RemainAfterExit=yes"
						  			echo "[Install]"
						  			echo "WantedBy=multi-user.target"
								} > /etc/systemd/system/usbipd.service	
									
								systemctl daemon-reload
								systemctl enable usbipd

								if ! [ -d /scripts ]; then
									sudo mkdir /scripts
								fi

								list_auto=$(sudo usbip list -l)

								auto_usbID=$(zenity --entry \
								--title="Enter a USB id to automatically bind(share) at system startup:" \
								--width=500 --height=150 \
								--text="$list_auto" \
								--entry-text "2-1")

								if [[ $auto_usbID -eq "" ]]; then
									break;
								fi

								{
									echo "#!/bin/sh"
									echo "PATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin"
									echo "usbipd -D"
									echo "usbip bind -b $auto_usbID"
									echo "usbip attach --remote=localhost --busid=$auto_usbID"
									echo "sleep 2"
									echo "usbip detach --port=00"
								} > /scripts/usbipd
								
								sudo chmod +x /scripts/usbipd

								systemctl start usbipd
								systemctl status usbipd > /dev/null 2>&1

								usbipd_status="$?"

								if [[ usbipd_status -eq 0 ]]; then
									zenity --info --width=450 --height=150 --text "<b>systemctl status usbipd </b>\nusbipd.service activated!"
								elif [[ usbipd_status -eq 1 ]]; then
									zenity --error --width=450 --height=150 --text "<b>systemctl status usbipd </b>\nError while starting usbipd.service"
								fi
							;;

							"Delete systemd script for share USB device" )
								systemctl stop usbipd
								systemctl disable usbipd

								systemctl status usbipd > /dev/null 2>&1
								delete_status="$?"

								sudo rm /scripts/usbipd
								sudo rm /etc/systemd/system/usbipd.service
								systemctl daemon-reload

								if [[ delete_status -eq 4 ]]; then
									zenity --info --width=450 --height=150 --text "<b>systemctl status usbipd </b>\nusbipd.service already deleted"
								else
									zenity --info --width=450 --height=150 --text "<b>systemctl status usbipd </b>\nusbipd.service succesfully deleted"
								fi
							;;

							"Create systemd script for attach USB device" )
								{
									echo "[Unit]"
									echo "Description=USBIPdclient"
									echo "[Service]"
									echo "ExecStart=/scripts/usbipdclient"
									echo "Type=oneshot"
									echo "RemainAfterExit=yes"
									echo "[Install]"
									echo "WantedBy=multi-user.target"
								} > /etc/systemd/system/usbipdclient.service

								systemctl daemon-reload
								systemctl enable usbipdclient

								if ! [ -d /scripts ]; then
									sudo mkdir /scripts
								fi

								auto_ip=$(zenity --entry \
								--title="" \
								--text="Enter server IP to automatically attach at system startup:" \
								--entry-text "localhost")

								auto_id=$(zenity --entry \
								--title="" \
								--text="Enter a USB id to automatically attach at system startup:" \
								--entry-text "2-1")
								
								{
									echo "#!/bin/sh"
									echo "PATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin"
									echo "usbipd -D"
									echo "sudo usbip attach -r $auto_ip -b $auto_id"
								} > /scripts/usbipdclient

								sudo chmod +x /scripts/usbipdclient

								systemctl start usbipdclient
								systemctl status usbipdclient > /dev/null 2>&1
								usbipcl_status="$?"

								if [[ usbipd_status -eq 0 ]]; then
									zenity --info --width=450 --height=150 --text "<b>systemctl status usbipd </b>\nusbipclient.service activated!"
								elif [[ usbipd_status -eq 1 ]]; then
									zenity --info --width=450 --height=150 --text "<b>systemctl status usbipd </b>\nError while starting usbipclient.service"
								fi

							;;

							"Delete systemd script for attach USB device" )
								systemctl stop usbipdclient
								systemctl disable usbipdclient

								systemctl status usbipdclient > /dev/null 2>&1
								delete="$?"

								sudo rm /scripts/usbipdclient
								sudo rm /etc/systemd/system/usbipdclient.service
								systemctl daemon-reload

								if [[ delete -eq 4 ]]; then
									zenity --info --width=450 --height=150 --text "<b>systemctl status usbipdclient </b>\nusbipdclient.service already deleted"
								else
									zenity --info --width=450 --height=150 --text "<b>systemctl status usbipdclient </b>\nusbipdclient.service succesfully deleted"
								fi
							;;

							"<-Back" )
								break;
							;;

							"")
								break;
							;;
						esac
					done
		;;
				esac

			done
		;;

		"x2go" )
			while true; do
				print_x2go_menu
				x2go_selected_item=$( echo $x2go_menu | awk -F ',' '{print $1}' )
				case "${x2go_selected_item}" in
					"Create autostartup x2go session" )

						if [ -f /etc/systemd/system/x2gohelper.service ]; then
							zenity --info --width=300 --height=200 --text "autostartup script already exist $(systemctl status x2gohelper)"
							break;
						fi
						{
							echo "[Unit]"
							echo "Description=x2gohelper"
							echo "[Service]"
							echo "ExecStart=/scripts/x2gohelper"
							echo "Type=oneshot"
							echo "RemainAfterExit=yes"
							echo "[Install]"
							echo "WantedBy=multi-user.target"
						} > /etc/systemd/system/x2gohelper.service	
									
						systemctl daemon-reload
						systemctl enable x2gohelper

						if ! [ -d /scripts ]; then
							sudo mkdir /scripts
						fi

						{
							echo "#!/bin/sh"
							echo "set -e"
							echo "echo \"Starting x2go_helper\""
							echo "sudo /usr/bin/xinit /usr/bin/usbip_helper"
							echo "exit 0"
						} > /scripts/x2gohelper

						chmod +x /scripts/x2gohelper

						cp bin/usbip_helper /usr/bin/usbip_helper

						chmod a+x /usr/bin/usbip_helper

						zenity --info --width=200 --height=100 --text "autostartup script succesfully create"
							
					;;

					"Delete x2go autostartup" )
						systemctl stop x2gohelper
						systemctl disable x2gohelper

						systemctl status x2gohelper > /dev/null 2>&1
						delete="$?"

						sudo rm /scripts/x2gohelper
						sudo rm /etc/systemd/system/x2gohelper.service
						systemctl daemon-reload

						if [[ delete -eq 4 ]]; then
							zenity --info --width=450 --height=150 --text "<b>systemctl status x2gohelper </b>\x2gohelper.service already deleted"
						else
							zenity --info --width=450 --height=150 --text "<b>systemctl status x2gohelper </b>\x2gohelper.service succesfully deleted"
						fi
					;;


					"Start x2go session" )
						if ! [ -f /etc/systemd/system/x2gohelper.service ]; then
							zenity --info --width=200 --height=100 --text "autostartup script wasn't create"
							break;
						fi
						shutdown -r -t 0 now
							
					;;

					"<-Back")
						break;
					;;		

					"")
						break;
					;;
				esac
			done
		;;

		"kvm" )
			while true; do
				print_kvm_menu
				kvm_selected_item=$( echo $kvm_menu | awk -F ',' '{print $1}' )
				case "${kvm_selected_item}" in
					"List of VMs" )
						list_VMs=$(virsh list --all)
						zenity --info --width=300 --height=250 --text "<b>virsh list --all</b> \n $list_VMs "
					;;

					"Start VM" )
						st_VM=$(zenity --entry \
							--title="" \
							--text="Enter VM name:" \
							--entry-text "VM1")

						list_VMs=$(virsh start $st_VM)
						zenity --info --width=200 --height=100 --text "<b>virsh start $st_VM</b> \n $list_VMs "
					;;

					"Stop VM" )
						sp_VM=$(zenity --entry \
							--title="" \
							--text="Enter VM name:" \
							--entry-text "VM1")

						list_VMs=$(virsh shutdown $sp_VM)
						zenity --info --width=200 --height=100 --text "<b>virsh shutdown $sp_VM</b> \n $list_VMs "
					;;

					"Delete VM" )
						ch_VM=$(zenity --entry \
							--title="" \
							--text="Enter VM name:" \
							--entry-text "VM1")

						virsh destroy $ch_VM
						list_VMs=$(virsh undefine $ch_VM)
						zenity --info --width=200 --height=100 --text "$list_VMs "
					;;


					"Open VMs" )
						virt-viewer
					;;

					"Create new VM" )
						zenity --info --width=200 --height=100 --text "Move iso image of system to /kvm/iso/"

						new_VM=$(zenity --entry \
							--title="" \
							--text="Enter VM name:" \
							--entry-text "VM1")

						iso=$(zenity --entry \
							--title="" \
							--text="Enter iso fullName:" \
							--entry-text "VM1")

						virt-install -n $new_VM \
						--autostart \
						--network=bridge:br0 \
						--ram 2048 --arch=x86_64 \
						--vcpus=2 --cpu host --check-cpu \
						--disk path=/kvm/vhdd/$new_VM-disk1.img,size=16 \
						--cdrom /kvm/iso/$iso \
						--os-type linux --os-variant=ubuntu20.04 --boot cdrom,hd,menu=on
					;;

					"<-Back")
						break;
					;;		

					"")
						break;
					;;
				esac
			done
		;;

		"")
			exit;
		;;
	esac
done